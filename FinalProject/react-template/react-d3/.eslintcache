[{"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/index.js":"1","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/reportWebVitals.js":"2","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/App.js":"3","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/My_Navbar.js":"4","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_BarChart.js":"5","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/data_processing.js":"6","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_PieChart.js":"7","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js":"8","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/index.js":"9","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/My_Navbar.js":"10","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/App.js":"11","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/reportWebVitals.js":"12","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_BarChart.js":"13","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_PieChart.js":"14","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js":"15","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/data_processing.js":"16","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_CirclePlot.js":"17","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/index.js":"18","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/reportWebVitals.js":"19","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Home.js":"20","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Geo.js":"21","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ParallelCoordinate.js":"22","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ImageSKY.js":"23","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Ggmap.js":"24"},{"size":1639,"mtime":1611538557654,"results":"25","hashOfConfig":"26"},{"size":362,"mtime":1610612293135,"results":"27","hashOfConfig":"26"},{"size":1134,"mtime":1611538129388,"results":"28","hashOfConfig":"26"},{"size":922,"mtime":1611047410608,"results":"29","hashOfConfig":"26"},{"size":7389,"mtime":1611901226203,"results":"30","hashOfConfig":"26"},{"size":846,"mtime":1611349337312,"results":"31","hashOfConfig":"26"},{"size":4958,"mtime":1611901002804,"results":"32","hashOfConfig":"26"},{"size":4766,"mtime":1611907353182,"results":"33","hashOfConfig":"26"},{"size":2165,"mtime":1613186873203,"results":"34","hashOfConfig":"35"},{"size":922,"mtime":1611047410608,"results":"36","hashOfConfig":"35"},{"size":1134,"mtime":1613192805692,"results":"37","hashOfConfig":"35"},{"size":362,"mtime":1610612293135,"results":"38","hashOfConfig":"35"},{"size":8630,"mtime":1613193391350,"results":"39","hashOfConfig":"35"},{"size":5807,"mtime":1613193369578,"results":"40","hashOfConfig":"35"},{"size":12188,"mtime":1613193318438,"results":"41","hashOfConfig":"35"},{"size":846,"mtime":1611349337312,"results":"42","hashOfConfig":"35"},{"size":1893,"mtime":1613070031653,"results":"43","hashOfConfig":"35"},{"size":1322,"mtime":1615343372647,"results":"44","hashOfConfig":"45"},{"size":362,"mtime":1610612293135,"results":"46","hashOfConfig":"45"},{"size":688,"mtime":1614456644020,"results":"47","hashOfConfig":"45"},{"size":390,"mtime":1615337308227,"results":"48","hashOfConfig":"45"},{"size":485,"mtime":1614553527245,"results":"49","hashOfConfig":"45"},{"size":19797,"mtime":1615633787234,"results":"50","hashOfConfig":"45"},{"size":4218,"mtime":1615620186787,"results":"51","hashOfConfig":"45"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"55"},"nwgv27",{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"55"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"55"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"68"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"55"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},"xa1qid",{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"78"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"78"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"78"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"78"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"104"},"iv36zs",{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"104"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"104"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"104"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"104"},"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/index.js",["121","122","123"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport data from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport App from './App';\nimport My_Navbar from './My_Navbar';\nimport reportWebVitals from './reportWebVitals';\nimport Sk_BarChart from './Sk_BarChart';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n      integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n      crossorigin=\"anonymous\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"./index.css\"\n    />\n      <My_Navbar/>\n      <div className=\"sk_container\">\n        <div className=\"sk_row\">\n          <div className=\"sk_col\">\n            <h2>Context view: Directors and their appearances</h2>\n            <App kind=\"VoronoiDiagram\"/> \n          </div>\n          <div className=\"sk_col\">\n            <div className=\"sk_row\">\n              <h2>Focus view: Top X most popular directors in all film locations</h2>\n              <App kind=\"PieChart\"/>\n            </div>\n            <div className=\"sk_row\">\n              <h2>Focus view: Top X most popular directors in selected film locations</h2>\n              <App kind=\"BarChart\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["124","125"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/reportWebVitals.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/App.js",["126","127","128"],"import React from 'react';\nimport Sk_BarChart from \"./Sk_BarChart\";\nimport Sk_PieChart from \"./Sk_PieChart\";\nimport csv from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport Sk_VoronoiDiagram from './Sk_VoronoiDiagram';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      data: csv\n    };\n\n  }\n\n  render(){\n    if(this.props.kind === \"BarChart\"){\n      return (\n        <div>\n          <div id=\"container\"> \n          </div>\n          <Sk_BarChart data={this.state.data} width={700} height={200} />\n        </div>\n      );\n    }else if(this.props.kind === \"PieChart\"){\n      return (\n        <div>\n          <div id=\"container_pie\"> \n          </div>\n          <Sk_PieChart data={this.state.data} width={600} height={400} />\n        </div>\n      );\n    }else if(this.props.kind === \"VoronoiDiagram\"){\n      return (\n        <div>\n          <div id=\"container_VoronoiDiagram\"> \n          </div>\n          <Sk_VoronoiDiagram data={this.state.data} width={800} height={800} />\n        </div>\n      );\n    }\n    \n    return (\n      <div></div>\n    );\n\n  }\n\n}\n\nexport default App;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/My_Navbar.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_BarChart.js",["129","130","131","132","133"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5,\n            location: \"City Hall\"\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    handleSelect(event){\n        this.setState({\n            location:event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, location, dataset){\n        let top_directors = [];\n        console.log(\"dataset: \",dataset);\n        let data = data_processing(data_cleaning(dataset,[\"Director\",\"Locations\"]),[\"Director\",\"Locations\"]);\n        \n        let director_stat = {};\n        let locations = new Set();\n        data.map(data=>{\n                locations.add(data[\"Locations\"].trim());\n                if(data[\"Locations\"].trim()!=location.trim()){\n                  return;\n                }\n                if(director_stat.hasOwnProperty(data[\"Director\"])){\n                  director_stat[data[\"Director\"]]+=1;\n                }else{\n                  director_stat[data[\"Director\"]]=1;\n                }\n              });\n        locations.delete(\"City Hall\");\n        d3.select(\"#locations\")\n          .selectAll(\"options\")\n          .data(locations)\n          .enter()\n          .append(\"option\")\n          .attr(\"value\",data=>data)\n          .text(data=>data);\n\n    for(let i = 0; i<num; i++){\n                let max_count = -1;\n                let max_director = \"\";\n                for(let prop in director_stat){\n                  if(director_stat[prop]>max_count){\n                    max_director = prop;\n                    max_count = director_stat[prop];\n                  }\n                }\n                top_directors.push({\n                name:max_director,\n                number:max_count\n                });\n                delete director_stat[max_director];\n            }\n        \n          console.log(top_directors);\n          return top_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,this.state.location,dataset);\n        \n            console.log(\"in drawchart:\",this.state.value);\n            console.log(top_directors);\n            if(!top_directors){\n                return;\n            }\n            console.log(\"in sk_barchart\");\n            console.log(top_directors);\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            \n            \n             /********************************* \n            * Visualization codes start here\n            * ********************************/\n           var width = this.props.width;\n           var height = this.props.height;\n           var margin = {left: 50, right: 85, top: 20, bottom: 20}\n            \n    \n           let x_scale = d3.scaleBand()\n                      .domain(top_directors.map(data=>data.name))\n                      .rangeRound([margin.left, width - margin.right])\n                      .padding(0.1);\n    \n            let y_scale = d3.scaleLinear()\n                      .domain([0,d3.max(top_directors,data=>data.number)])\n                      .range([height-margin.bottom,margin.top]);\n            \n           d3.select(\"#container\").selectAll(\"*\").remove();\n           \n           var svg = d3.select('#container')\n                    .append('svg')\n                    .attr('width', width + margin.left + margin.right)\n                    .attr('height', height + margin.top + margin.bottom)\n                    .style(\"background\",\"grey\");\n    \n            let bars = svg.append(\"g\")\n               .selectAll(\"rect\")\n               .data(top_directors)\n               .join(\"rect\")\n               .attr(\"x\",data=>x_scale(data.name))\n               .attr(\"y\",data=>y_scale(data.number))\n               .attr(\"height\",data=>{return y_scale(0)-y_scale(data.number)})\n               .attr(\"width\",x_scale.bandwidth())\n               .attr(\"fill\",data=>colors(data.number));\n            \n            let captions = svg.append(\"g\")\n               .selectAll(\"text\")\n               .data(top_directors)\n               .join(\"text\")\n               .attr(\"text-anchor\",\"middle\")\n               .attr(\"x\",data=>x_scale(data.name)+x_scale.bandwidth()/2)\n               .attr(\"y\",data=>y_scale(data.number)+15)\n               .text(data=>data.name+\":\"+data.number)\n               .attr(\"font-size\", \"11px\")\n               .attr(\"fill\",\"white\");\n     \n           \n           // create a scatter plot\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(0,\"+(height-margin.bottom)+\")\")\n           .call(d3.axisBottom(x_scale));\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n           .call(d3.axisLeft(y_scale));\n           \n        let legends = svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+(width-50)+\",0)\")\n           .selectAll(\".category\").data(top_directors);\n    \n        let legend = legends.join(\"g\")\n              .classed(\"category\",true)\n              .attr(\"transform\",(data,index)=>{\n                return \"translate(0,\"+(index+1)*30+\")\";\n     \n            });\n        \n        legend.append(\"rect\")\n            .attr(\"width\",20)\n            .attr(\"height\",20)\n            .attr(\"fill\",data=>colors(data.number));\n    \n        legend.append(\"text\").text(data=>data.name)\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"font-family\", \"Saira\")\n                           .attr(\"fill\",data=>colors(data.number))\n                           .attr(\"x\",20)\n                           .attr(\"y\",20);\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"y label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", -40)\n            .attr(\"y\", 10)\n            .attr(\"dy\", \".5em\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .text(\"appearance (times)\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"x label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height+margin.bottom/2)\n            .text(\"directors\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n\n        });\n\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n            <label>\n                Film location:\n                <select id=\"locations\" value={this.state.location} onChange={this.handleSelect} >\n                    <option>City Hall</option>\n                </select>\n            </label>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/data_processing.js",[],["134","135"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_PieChart.js",["136","137"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let top_5_directors = [];\n        let director_stat = {}\n        data.map(data=>{\n          if(director_stat.hasOwnProperty(data[\"Director\"])){\n            director_stat[data[\"Director\"]]+=1;\n          }else{\n            director_stat[data[\"Director\"]]=1;\n          }\n        });\n        for(let i = 0; i<num; i++){\n          let max_count = -1;\n          let max_director = \"\";\n          for(let prop in director_stat){\n            if(director_stat[prop]>max_count){\n              max_director = prop;\n              max_count = director_stat[prop];\n            }\n          }\n          top_5_directors.push({\n          name:max_director,\n          number:max_count\n          });\n          delete director_stat[max_director];\n        }\n        return top_5_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,dataset);\n        \n\n            if(!top_directors){\n                return;\n            }\n\n            let pie_data = d3.pie().sort(null).value(data=>data.number)(top_directors);\n  \n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            var width = this.props.width;\n            var height = this.props.height;\n            d3.select('#container_pie').selectAll(\"*\").remove();\n            let svg = d3.select('#container_pie')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n            let segments = d3.arc()\n                             .innerRadius(0)\n                             .outerRadius(150)\n                             .padAngle(0.05)\n                             .padRadius(50);\n            let g = svg.append(\"g\")\n                      .attr(\"transform\",\"translate(200,200)\")\n                      .selectAll(\"path\")\n                      .data(pie_data)\n                      .join(\"path\")\n                      .attr(\"d\",segments)\n                      .attr(\"fill\",data=>colors(data.data.number));\n                      \n            let caption = svg.select(\"g\")\n                           .selectAll(\"text\")\n                           .data(pie_data);\n            //console.log(svg.select(\"g\").selectAll(\"text\"));\n            caption.join(\"text\").each(function(data){\n            let center = segments.centroid(data);\n            //console.log(this);\n            d3.select(this).attr(\"x\",center[0]-80)\n                           .attr(\"y\",center[1])\n                           .text(data.data.name+\":\"+data.data.number)\n                           .attr(\"font-family\",\"Saira\")\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"fill\",\"white\");\n            });\n            let legends = svg.append(\"g\")\n                             .attr(\"transform\",\"translate(400,100)\")\n                             .selectAll(\".category\").data(pie_data);\n            let legend = legends.join(\"g\")\n                                .classed(\"category\",true)\n                                .attr(\"transform\",(data,index)=>{\n                                  return \"translate(0,\"+(index+1)*30+\")\";\n                                });\n            legend.append(\"rect\")\n                  .attr(\"width\",20)\n                  .attr(\"height\",20)\n                  .attr(\"fill\",data=>colors(data.data.number));\n            legend.append(\"text\").text(data=>data.data.name)\n                                 .attr(\"font-weight\",\"bold\")\n                                 .attr(\"font-family\", \"Saira\")\n                                 .attr(\"fill\",data=>colors(data.data.number))\n                                 .attr(\"x\",20)\n                                 .attr(\"y\",20);\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework2/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js",["138"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\n\nclass Sk_VoronoiDiagram extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            radius:25\n        };\n        this.handleChange = this.handleChange.bind(this);\n        \n    }\n\n    handleChange(event){\n        this.setState({\n            radius: event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let directors = {};\n        data.map(data=>{\n            if(directors.hasOwnProperty(data[\"Director\"])){\n                directors[data[\"Director\"]] += 1;\n            }else{\n                directors[data[\"Director\"]] = 1;\n            }\n        });\n\n        let keys = Object.keys(directors);\n        console.log(\"keys\",keys)\n        let results = keys.map(data=>{\n            return {Director:data, appearance:directors[data]}\n        });\n        console.log(\"results\",results)\n\n        return results;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(dataset);\n        \n            console.log(\"in voronoi diagram\",top_directors);\n            if(!top_directors){\n                return;\n            }\n            let width = this.props.width;\n            let height = this.props.height;\n            let margin = {left: 50, right: 20, top: 20, bottom: 20}\n\n            d3.select('#container_VoronoiDiagram').selectAll(\"*\").remove();\n            let svg = d3.select('#container_VoronoiDiagram')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n\n\n\n            let x_scale = d3.scaleBand()\n                            .domain(top_directors.map(data=>data[\"Director\"]))\n                            .rangeRound([margin.left, width - margin.right])\n                            .padding(0.1);\n\n            let y_scale = d3.scaleLinear()\n                            .domain([0,d3.max(top_directors,data=>data[\"appearance\"])])\n                            .range([height-margin.bottom,margin.top]);\n\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data[\"appearance\"])]).interpolator(d3.interpolateBlues);\n\n            let scatterplots = top_directors.map(data=>{\n                return [x_scale(data[\"Director\"]),y_scale(data[\"appearance\"]),data[\"appearance\"],data[\"Director\"]];\n            });\n\n            let delaunay = d3.Delaunay.from(scatterplots,data=>data[0],data=>data[1]);\n            let voronoi = delaunay.voronoi([ 0, 0, width, height ])\n\n            svg.selectAll('path')\n                .data( top_directors.map((d,i) => voronoi.renderCell(i)) )\n                .join('path')\n                .attr('d', data => data)\n                .style(\"fill\",\"grey\")\n                .style('opacity', 0.8)\n                .style('stroke', 'white')\n                .style('stroke-opacity', 1)\n\n            console.log(\"scatterplot\",scatterplots);\n            svg.selectAll(\"text\")\n                .data(scatterplots)\n                .enter()\n                .append(\"text\")\n                .attr(\"transform\",data=>{\n                    return \"translate(\"+data[0]+\",\"+data[1]+\")\";\n                })\n                .style(\"font-size\",data=>{\n                    return this.state.radius+\"px\";\n                })\n                .attr(\"fill\",data=>colors(data[2]))\n                .text(data=>data[3]);\n\n            svg.append(\"g\")\n                .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n                .call(d3.axisLeft(y_scale))\n                .attr(\"fill\",\"white\")\n                .style(\"color\",\"white\");\n\n            svg.append(\"text\")\n                .attr(\"class\", \"y label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\",-(width/2)+2*margin.top)\n                .attr(\"y\", 6)\n                .attr(\"dy\", \".75em\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"appearances (times)\")\n                .attr(\"fill\",\"white\");\n\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label for=\"vol\">voronoi diagram scatterplots font-size(px):</label>\n                <input type=\"range\" min=\"0\" max=\"25\" onChange={this.handleChange}/>\n            </form>\n        </div>);\n    }\n}\n\nexport default Sk_VoronoiDiagram;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/index.js",["139","140","141","142"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport data from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport App from './App';\nimport My_Navbar from './My_Navbar';\nimport reportWebVitals from './reportWebVitals';\nimport Sk_BarChart from './Sk_BarChart';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n      integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n      crossorigin=\"anonymous\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"./index.css\"\n    />\n\n      <My_Navbar/>\n      <div className=\"sk_container\">\n        <div className=\"sk_row\">\n          <div className=\"sk_col\">\n            <div className=\"sk_row\">\n              <h4><b>Context view: Directors and their appearances (brush to get detailed word infos!)</b></h4>\n              <App kind=\"VoronoiDiagram\"/> \n            </div>\n            <div className=\"sk_row\">\n              <h6><b>Sub-context view (toggle on circles and count the appearance sum with color transition! Mouseover for individual detail tooltips!)</b></h6>\n              <h6 id=\"cp_counter\" style={{ width:\"20vw\",fontWeight:'bold',textShadow:'-1px 0 black, 0 1px black, 1px 0 black, 0 -1px black'}}></h6>\n              <div id=\"CirclePlot\"></div>\n            </div>\n\n          </div>\n          <div className=\"sk_col\">\n            <div className=\"sk_row\">\n              <h4><b>Focus view: Top X most popular directors in all film locations</b></h4>\n              <App kind=\"PieChart\"/>\n            </div>\n            <div className=\"sk_row\">\n              <h4><b>Focus view: Top X most popular directors in selected film locations</b></h4>\n              <App kind=\"BarChart\"/>\n            </div>\n          </div>\n        </div>\n      </div>\n\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["143","144"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/My_Navbar.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/App.js",["145","146","147"],"import React from 'react';\nimport Sk_BarChart from \"./Sk_BarChart\";\nimport Sk_PieChart from \"./Sk_PieChart\";\nimport csv from  './datasets/Film_Locations_in_San_Francisco.csv';\nimport Sk_VoronoiDiagram from './Sk_VoronoiDiagram';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state ={\n      data: csv\n    };\n\n  }\n\n  render(){\n    if(this.props.kind === \"BarChart\"){\n      return (\n        <div>\n          <div id=\"container\"> \n          </div>\n          <Sk_BarChart data={this.state.data} width={800} height={280} />\n        </div>\n      );\n    }else if(this.props.kind === \"PieChart\"){\n      return (\n        <div>\n          <div id=\"container_pie\"> \n          </div>\n          <Sk_PieChart data={this.state.data} width={800} height={350} />\n        </div>\n      );\n    }else if(this.props.kind === \"VoronoiDiagram\"){\n      return (\n        <div>\n          <div id=\"container_VoronoiDiagram\"> \n          </div>\n          <Sk_VoronoiDiagram data={this.state.data} width={800} height={350} />\n        </div>\n      );\n    }\n    \n    return (\n      <div></div>\n    );\n\n  }\n\n}\n\nexport default App;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/reportWebVitals.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_BarChart.js",["148","149","150","151","152","153"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\nimport { sort } from 'd3';\nimport {legendColor} from \"d3-svg-legend\";\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5,\n            location: \"City Hall\",\n            sort:true\n        };\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSelect = this.handleSelect.bind(this);\n        this.handleSort = this.handleSort.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    handleSort(event){\n        this.setState({\n            sort:!this.state.sort\n        });\n    }\n\n    handleSelect(event){\n        this.setState({\n            location:event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, location, dataset){\n        let top_directors = [];\n        console.log(\"dataset: \",dataset);\n        let data = data_processing(data_cleaning(dataset,[\"Director\",\"Locations\"]),[\"Director\",\"Locations\"]);\n        \n        let director_stat = {};\n        let locations = new Set();\n        data.map(data=>{\n                locations.add(data[\"Locations\"].trim());\n                if(data[\"Locations\"].trim()!=location.trim()){\n                  return;\n                }\n                if(director_stat.hasOwnProperty(data[\"Director\"])){\n                  director_stat[data[\"Director\"]]+=1;\n                }else{\n                  director_stat[data[\"Director\"]]=1;\n                }\n              });\n        locations.delete(\"City Hall\");\n        d3.select(\"#locations\")\n          .selectAll(\"options\")\n          .data(locations)\n          .enter()\n          .append(\"option\")\n          .attr(\"value\",data=>data)\n          .text(data=>data);\n\n    for(let i = 0; i<num; i++){\n                let max_count = -1;\n                let max_director = \"\";\n                for(let prop in director_stat){\n                  if(director_stat[prop]>max_count){\n                    max_director = prop;\n                    max_count = director_stat[prop];\n                  }\n                }\n                top_directors.push({\n                name:max_director,\n                number:max_count\n                });\n                delete director_stat[max_director];\n            }\n        \n          console.log(top_directors);\n          if(this.state.sort){\n            top_directors.sort((a,b)=>a[\"number\"]-b[\"number\"]);\n          }else{\n            top_directors.sort((a,b)=>b[\"number\"]-a[\"number\"]);             \n          }\n          console.log(this.state.sort);\n\n          return top_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,this.state.location,dataset);\n        \n            console.log(\"in drawchart:\",this.state.value);\n            console.log(top_directors);\n            if(!top_directors){\n                return;\n            }\n            console.log(\"in sk_barchart\");\n            console.log(top_directors);\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            \n            \n             /********************************* \n            * Visualization codes start here\n            * ********************************/\n           var width = this.props.width;\n           var height = this.props.height;\n           var margin = {left: 50, right: 85, top: 20, bottom: 20}\n            \n    \n           let x_scale = d3.scaleBand()\n                      .domain(top_directors.map(data=>data.name))\n                      .rangeRound([margin.left, width - margin.right])\n                      .padding(0.1);\n    \n            let y_scale = d3.scaleLinear()\n                      .domain([0,d3.max(top_directors,data=>data.number)])\n                      .range([height-margin.bottom,margin.top]);\n            \n           d3.select(\"#container\").selectAll(\"*\").remove();\n           \n           var svg = d3.select('#container')\n                    .append('svg')\n                    .attr('width', width + margin.left + margin.right)\n                    .attr('height', height + margin.top + margin.bottom)\n                    .style(\"background\",\"grey\");\n    \n            let bars = svg.append(\"g\")\n               .selectAll(\"rect\")\n               .data(top_directors)\n               .join(\"rect\")\n               .attr(\"x\",data=>x_scale(data.name))\n               .attr(\"width\",x_scale.bandwidth())\n               .attr(\"y\",data=>y_scale(0))\n               .attr(\"height\",data=>0)\n               .transition()\n               .duration(2000)\n               .attr(\"y\",data=>y_scale(data.number))\n               .attr(\"height\",data=>{return y_scale(0)-y_scale(data.number)})\n               .attr(\"fill\",data=>colors(data.number));\n            \n            let captions = svg.append(\"g\")\n               .selectAll(\"text\")\n               .data(top_directors)\n               .join(\"text\")\n               .attr(\"text-anchor\",\"middle\")\n               .attr(\"x\",data=>x_scale(data.name)+x_scale.bandwidth()/2)\n               .attr(\"y\",data=>y_scale(data.number)+15)\n               .text(data=>data.name+\":\"+data.number)\n               .attr(\"font-size\", \"11px\")\n               .attr(\"fill\",\"red\");\n     \n           \n           // create a scatter plot\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(0,\"+(height-margin.bottom)+\")\")\n           .call(d3.axisBottom(x_scale));\n        svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n           .call(d3.axisLeft(y_scale));\n           \n        let legends = svg.append(\"g\")\n           .attr(\"transform\",\"translate(\"+(width-90)+\",0)\")\n           .selectAll(\".category\").data(top_directors);\n    \n        let legend = legends.join(\"g\")\n              .classed(\"category\",true)\n              .attr(\"transform\",(data,index)=>{\n                return \"translate(0,\"+((index+1)*30)+\")\";\n     \n            });\n        \n        legend.append(\"rect\")\n            .attr(\"width\",5)\n            .attr(\"height\",15)\n            .attr(\"fill\",data=>colors(data.number));\n    \n        legend.append(\"text\").text(data=>data.name)\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"font-family\", \"Saira\")\n                           .attr(\"font-size\",\"0.8em\")\n                           .attr(\"fill\",data=>colors(data.number))\n                           .attr(\"x\",20)\n                           .attr(\"y\",20);\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"y label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", -40)\n            .attr(\"y\", 10)\n            .attr(\"dy\", \".5em\")\n            .attr(\"transform\", \"rotate(-90)\")\n            .text(\"appearance (times)\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n        \n        svg.append(\"text\")\n            .attr(\"class\", \"x label\")\n            .attr(\"text-anchor\", \"end\")\n            .attr(\"x\", width/2)\n            .attr(\"y\", height+margin.bottom/2)\n            .text(\"directors\")\n            .attr(\"font-size\",\"0.7em\")\n            .attr(\"fill\",\"black\");\n\n        svg.append(\"g\")\n            .attr(\"class\", \"colorLegend\")\n            .attr(\"transform\", \"translate(\"+(width+45)+\",20)\")\n            .attr(\"fill\",\"black\");\n          \n        var colorlegend = legendColor()\n                .shapeWidth(10)\n                .title(\"appearance range\")\n                .titleWidth(50)\n                .labelFormat(d3.format(\".2f\"))\n                .scale(colors);\n          \n        svg.select(\".colorLegend\")\n            .call(colorlegend);\n\n\n        });\n\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n            <label>\n                Film location:\n                <select id=\"locations\" value={this.state.location} onChange={this.handleSelect} >\n                    <option>City Hall</option>\n                </select>\n            </label>\n            <button onClick={this.handleSort}>sort(ascend/descend)</button>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_PieChart.js",["154","155"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\nimport {legendColor} from \"d3-svg-legend\";\n\nclass Sk_BarChart extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            value: 5\n        };\n        this.handleChange = this.handleChange.bind(this);\n    }\n\n    handleChange(event){\n        this.setState({\n            value: event.target.value\n        });\n    }\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(num, dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let top_5_directors = [];\n        let director_stat = {}\n        data.map(data=>{\n          if(director_stat.hasOwnProperty(data[\"Director\"])){\n            director_stat[data[\"Director\"]]+=1;\n          }else{\n            director_stat[data[\"Director\"]]=1;\n          }\n        });\n        for(let i = 0; i<num; i++){\n          let max_count = -1;\n          let max_director = \"\";\n          for(let prop in director_stat){\n            if(director_stat[prop]>max_count){\n              max_director = prop;\n              max_count = director_stat[prop];\n            }\n          }\n          top_5_directors.push({\n          name:max_director,\n          number:max_count\n          });\n          delete director_stat[max_director];\n        }\n        return top_5_directors;\n    \n      }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(this.state.value,dataset);\n        \n\n            if(!top_directors){\n                return;\n            }\n\n            let pie_data = d3.pie().sort(null).value(data=>data.number)(top_directors);\n  \n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data.number)]).interpolator(d3.interpolateBlues);\n            var width = this.props.width;\n            var height = this.props.height;\n            d3.select('#container_pie').selectAll(\"*\").remove();\n            let svg = d3.select('#container_pie')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n            let segments = d3.arc()\n                             .innerRadius(0)\n                             .outerRadius(150)\n                             .padAngle(0.05)\n                             .padRadius(50);\n\n            let g = svg.append(\"g\")\n                      .attr(\"transform\",\"translate(200,200)\")\n                      .selectAll(\"path\")\n                      .data(pie_data)\n                      .join(\"path\")\n                      .attr(\"d\",segments)\n                      .attr(\"fill\",colors(50))\n                      .transition()\n                      .duration(2000)\n                      .attr(\"fill\",data=>colors(data.data.number));\n                      \n            let caption = svg.select(\"g\")\n                           .selectAll(\"text\")\n                           .data(pie_data);\n            //console.log(svg.select(\"g\").selectAll(\"text\"));\n            caption.join(\"text\").each(function(data){\n            let center = segments.centroid(data);\n            //console.log(this);\n            d3.select(this).attr(\"x\",center[0]-80)\n                           .attr(\"y\",center[1])\n                           .text(data.data.name+\":\"+data.data.number)\n                           .attr(\"font-family\",\"Saira\")\n                           .attr(\"font-weight\",\"bold\")\n                           .attr(\"fill\",\"red\");\n            });\n            let legends = svg.append(\"g\")\n                             .attr(\"transform\",\"translate(\"+(width-400)+\",60)\")\n                             .selectAll(\".category\").data(pie_data);\n            let legend = legends.join(\"g\")\n                                .classed(\"category\",true)\n                                .attr(\"transform\",(data,index)=>{\n                                  return \"translate(0,\"+(index+1)*30+\")\";\n                                });\n            legend.append(\"rect\")\n                  .attr(\"width\",20)\n                  .attr(\"height\",20)\n                  .attr(\"fill\",data=>colors(data.data.number));\n            legend.append(\"text\").text(data=>data.data.name)\n                                 .attr(\"font-weight\",\"bold\")\n                                 .attr(\"font-family\", \"Saira\")\n                                 .attr(\"fill\",data=>colors(data.data.number))\n                                 .attr(\"x\",20)\n                                 .attr(\"y\",20);\n            svg.append(\"g\")\n                .attr(\"class\", \"colorLegend\")\n                .attr(\"transform\", \"translate(\"+(width-400)+\",20)\")\n                .attr(\"fill\",\"black\");\n                               \n            var colorlegend = legendColor().shapeWidth(60)\n                                     .orient('horizontal')\n                                     .title(\"appearance range\")\n                                     .titleWidth(200)\n                                     .labelFormat(d3.format(\".2f\"))\n                                     .scale(colors);\n                               \n            svg.select(\".colorLegend\")\n              .call(colorlegend);\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            <form>\n                <label>\n                Top X directors:\n                <input type=\"text\" value={this.state.value} onChange={this.handleChange} />\n                </label>\n            </form>\n        </div>);\n    }\n}\n\nexport default Sk_BarChart;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_VoronoiDiagram.js",["156","157","158"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { data_processing,data_cleaning } from './data_processing';\nimport {legendColor} from \"d3-svg-legend\";\n\n\nclass Sk_VoronoiDiagram extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            radius:10,\n            zoomState: null,\n            circlePlotData:null\n        };\n        this.handleChange = this.handleChange.bind(this);\n        \n    }\n\n    handleChange(event){\n        this.setState({\n            radius: event.target.value\n        });\n    }\n\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    data_pipeline(dataset){\n  \n        let data = data_processing(data_cleaning(dataset,[\"Director\"]),[\"Director\"]);\n        let directors = {};\n        data.map(data=>{\n            if(directors.hasOwnProperty(data[\"Director\"])){\n                directors[data[\"Director\"]] += 1;\n            }else{\n                directors[data[\"Director\"]] = 1;\n            }\n        });\n\n        let keys = Object.keys(directors);\n        // console.log(\"keys\",keys)\n        let results = keys.map(data=>{\n            return {Director:data, appearance:directors[data]}\n        });\n        // console.log(\"results\",results)\n\n        return results;\n    \n      }\n\n    // handleZoom(state){\n    //     // console.log(\"handle zooming\");\n    //     this.setState({\n    //         zoomState: state\n    //     });\n    // }\n\n    drawCirclePlot(data,colorsCallback){\n        let width = this.props.width;\n        let height = this.props.height;\n        let radius = width/40;\n        d3.select('#CirclePlot').selectAll(\"*\").remove();\n        let svg = d3.select('#CirclePlot')\n                    .append('svg')\n                    .attr(\"width\",width)\n                    .attr(\"height\",height)\n                    .style(\"background\",\"grey\");\n\n        console.log(\"circleplotting\");\n\n        const circles = data.map((data)=>{\n            data[\"cx\"] = Math.random() * (width - radius*2)+radius/4;\n            data[\"cy\"] = Math.random() * (height - radius*2)+radius/4;\n            return data;\n        });\n\n        console.log(\"circles\",circles)\n\n        // svg.append(\"text\")\n        //     .attr(\"transform\",\"translate(50,50)\")\n        //     .attr(\"id\",\"cp_counter\")\n        //     .text(\"Selected Appearances Sum: 0\");\n\n        d3.select(\"#cp_counter\")\n          .text(\"Selected Appearances Sum: 0\")\n          .style(\"color\",\"white\");\n\n        svg.selectAll(\"circle\")\n            .data(circles)\n            .join(\"circle\")\n            .attr(\"cx\",data=>data[\"cx\"])\n            .attr(\"cy\",data=>data[\"cy\"])\n            .attr(\"r\",radius)\n            .attr(\"fill\",data=>data[\"color\"])\n            .attr(\"id\", (data,index)=>{\n                return \"cp\"+index;\n            })\n            .on(\"click\",(event)=>{\n                // d3.select(this).transition()\n                //                .attr(\"fill\", \"black\");\n                const curr_text = d3.select(\"#cp_counter\").text();\n                let split_text = curr_text.split(\":\");\n                if(d3.select(\"#\"+event.target.id).attr(\"stroke\")!=\"rgb(255, 0, 0)\"){\n                    d3.select(\"#\"+event.target.id)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius*2)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius)\n                    .attr(\"stroke\", \"red\");\n\n                    let appearance = Number(circles[Number(event.target.id.replace(\"cp\",\"\"))][\"appearance\"]);\n                    d3.select(\"#cp_counter\").text(split_text[0]+\":\"+(Number(split_text[1])+appearance))\n                                            .style(\"color\",colorsCallback((Number(split_text[1])+appearance)));\n                \n                }else{\n                    d3.select(\"#\"+event.target.id)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius/2)\n                    .transition()\n                    .duration(500)\n                    .attr(\"r\",radius)\n                    .attr(\"stroke\", \"none\");  \n                    // d3.select(\"#cp_counter\").text(split_text[0]+\":\"+(Number(split_text[1])-circles[Number(event.target.id.replace(\"cp\"))][\"appearance\"]));\n                    let appearance = Number(circles[Number(event.target.id.replace(\"cp\",\"\"))][\"appearance\"]);\n                    d3.select(\"#cp_counter\").text(split_text[0]+\":\"+(Number(split_text[1])-appearance))\n                                            .style(\"color\",colorsCallback((Number(split_text[1])-appearance)));\n                }\n                // console.log(d3.select(\"#\"+event.target.id).attr(\"stroke\"));\n\n\n            })\n            .append(\"title\")\n            .text(data=>data[\"director\"]+\":\"+data[\"appearance\"]);\n    }\n\n\n    drawChart(){\n            // log csv in browser console\n        d3.csv(this.props.data)\n        .then((dataset)=>{\n\n            let top_directors = this.data_pipeline(dataset);\n        \n            // console.log(\"in voronoi diagram\",top_directors);\n            if(!top_directors){\n                return;\n            }\n            let width = this.props.width;\n            let height = this.props.height;\n            let margin = {left: 50, right: 20, top: 20, bottom: 20}\n\n\n            d3.select('#container_VoronoiDiagram').selectAll(\"*\").remove();\n            let svg = d3.select('#container_VoronoiDiagram')\n                          .append('svg')\n                          .attr(\"width\",width)\n                          .attr(\"height\",height)\n                          .style(\"background\",\"grey\");\n\n            let names = top_directors.map(data=>{\n                return data[\"Director\"];\n            });\n\n\n            names = [...new Set(names)];\n            // console.log(names);\n\n            let x_scale = d3.scaleLinear()\n                            .domain([0,names.length])\n                            .rangeRound([margin.left, width - margin.right]);\n\n\n\n\n            let y_scale = d3.scaleLinear()\n                            .domain([0,d3.max(top_directors,data=>data[\"appearance\"])])\n                            .range([height-margin.bottom,margin.top]);\n            \n            // if(this.state.zoomState!=null){\n            //     const updated_y_domain = this.state.zoomState.rescaleY(y_scale).domain();\n            //     y_scale.domain(updated_y_domain);\n            //     const updated_x_domain = this.state.zoomState.rescaleX(x_scale).domain();\n            //     x_scale.domain(updated_x_domain);\n            //     console.log(x_scale.domain());\n            //     console.log(y_scale.domain());\n\n            // }\n\n            let colors = d3.scaleSequential().domain([0,d3.max(top_directors,data=>data[\"appearance\"])]).interpolator(d3.interpolateBlues);\n\n            let scatterplots = top_directors.map(data=>{\n                return [x_scale(names.indexOf(data[\"Director\"])),y_scale(data[\"appearance\"]),data[\"appearance\"],data[\"Director\"]];\n            });\n\n            let delaunay = d3.Delaunay.from(scatterplots,data=>data[0],data=>data[1]);\n            let voronoi = delaunay.voronoi([ 0, 0, width, height ]);\n\n            svg.selectAll('path')\n                .data( top_directors.map((d,i) => voronoi.renderCell(i)) )\n                .join('path')\n                .attr('d', data => data)\n                .style(\"fill\",(data,index)=>{\n                    return colors(top_directors[index][\"appearance\"]);\n                })\n                .style('opacity', 0.8)\n                .style('stroke', 'white')\n                .style('stroke-opacity', 1);\n\n            // console.log(\"scatterplot\",scatterplots);\n            let words = svg.selectAll(\"text\")\n                            .data(scatterplots)\n                            .enter()\n                            .append(\"text\")\n                            .attr(\"transform\",data=>{\n                                return \"translate(\"+data[0]+\",\"+data[1]+\")\";\n                            })\n                            .style(\"font-size\",data=>{\n                                return this.state.radius+\"px\";\n                            })\n                            .attr(\"fill\",\"red\")\n                            .style(\"text-anchor\", \"middle\")\n                            .text(data=>data[3]);\n\n\n            svg.append(\"g\")\n                .attr(\"transform\",\"translate(\"+margin.left+\",0)\")\n                .call(d3.axisLeft(y_scale))\n                .attr(\"fill\",\"black\")\n                .style(\"color\",\"black\");\n\n            svg.append(\"text\")\n                .attr(\"class\", \"y label\")\n                .attr(\"text-anchor\", \"end\")\n                .attr(\"x\",-110)\n                .attr(\"y\", 6)\n                .attr(\"dy\", \".75em\")\n                .attr(\"transform\", \"rotate(-90)\")\n                .text(\"appearances (times)\")\n                .attr(\"fill\",\"black\");\n\n            // const zoomi = d3.zoom().on(\"zoom\",(event)=>{\n            //                             //   console.log(\"zomming\");               \n            //                             const zoomState = event.transform;\n            //                             this.handleZoom(zoomState);\n                                        //   console.log(zoomState);\n                                    // });\n\n            let selected = ({selection})=>{\n                if(selection==null){\n\n                    words.attr(\"font-weight\",\"\")\n                }else{\n                    const [[x0, y0], [x1, y1]] = selection;\n                    words.attr(\"font-weight\", ([x, y]) => {\n                      return x0 <= x && x <= x1\n                          && y0 <= y && y <= y1\n                          ? \"bold\" : \"\";\n                    });\n                    words.style(\"font-size\", ([x, y]) => {\n                        return x0 <= x && x <= x1\n                            && y0 <= y && y <= y1\n                            ? (this.state.radius*4) + \"px\": this.state.radius+\"px\";\n                      });\n                    let selected_names = [];\n\n                    for(let i = 0; i < scatterplots.length; i++){\n                        if(x0 <= scatterplots[i][0] && scatterplots[i][0] <= x1 && y0 <= scatterplots[i][1] && scatterplots[i][1] <= y1){\n                            selected_names.push({\n                                director : scatterplots[i][3],\n                                appearance : scatterplots[i][2],\n                                color : colors(scatterplots[i][2])\n                            });\n                        }\n                    }\n                    console.log(selected_names);\n\n\n\n                    this.drawCirclePlot(selected_names,colors);\n\n\n                }\n            }\n\n            const brush = d3.brush()\n                            .filter(event => !event.ctrlKey&&(event.metaKey||event.target.__data__.type!=\"overlay\")&&!event.button)\n                            .on(\"start brush end\",selected);\n\n            svg.append(\"g\")\n                .attr(\"class\",\"brush\")\n                .call(brush)\n                .call(brush.move,[[100,100],[200,200]])\n                .call(g => g.select(\".overlay\").style(\"cursor\",\"default\"));\n\n            // svg.call(zoomi)\n            // this.setState({\n            //     circlePlotData: selected_names\n            // })\n          \n          \n          svg.append(\"g\")\n            .attr(\"class\", \"colorLegend\")\n            .attr(\"transform\", \"translate(\"+(width-320)+\",20)\")\n            .attr(\"fill\",\"black\");\n          \n          var legend = legendColor()\n                .shapeWidth(60)\n                .orient('horizontal')\n                .title(\"appearance range\")\n                .titleWidth(200)\n                .labelFormat(d3.format(\".2f\"))\n                .scale(colors);\n          \n          svg.select(\".colorLegend\")\n            .call(legend);\n\n        });\n\n    \n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n            {/* <Sk_CirclePlot data={this.state.circlePlotData} width={this.props.width} height={this.props.height}/> */}\n        </div>);\n    }\n}\n\nexport default Sk_VoronoiDiagram;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/data_processing.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/Homework3/kunhuang/react-template/react-d3/src/Sk_CirclePlot.js",["159"],"import React, {Component} from 'react';\nimport * as d3 from \"d3\";\nimport { drag } from 'd3';\n\nclass Sk_CirclePlot extends Component{\n\n    componentDidMount(){\n        this.drawChart();\n    }\n\n    componentDidUpdate() {\n        this.drawChart();\n    }\n\n    drawChart(){\n        \n        let data = this.props.data;\n        if(data == null){\n            return;\n        }\n        let width = this.props.width;\n        let height = this.props.height;\n        let radius = this.props.radius;\n        d3.select('#CirclePlot').selectAll(\"*\").remove();\n        let svg = d3.select('#CirclePlot')\n                    .append('svg')\n                    .attr(\"width\",width)\n                    .attr(\"height\",height)\n                    .style(\"background\",\"grey\");\n\n        const circles = data.map((data)=>{\n            data[\"cx\"] = Math.random() * (width - radius*2);\n            data[\"cy\"] = Math.random() * (height - radius*2);\n            return data;\n        });\n\n        let drag = d3.drag()\n                     .on(\"start\",(event,data)=>{\n                         d3.select(this).raise().attr(\"stroke\",\"black\");\n                     })\n                     .on(\"drag\",(event,data)=>{\n                        d3.select(this).attr(\"cx\", data.cx = event.x)\n                                        .attr(\"cy\", data.cy = event.y);\n                     })\n                     .on(\"end\",(event,data)=>{\n                        d3.select(this).attr(\"stroke\", null);\n                     });\n\n        svg.selectAll(\"circle\")\n            .data(circles)\n            .join(\"circle\")\n            .attr(\"cx\",data=>data[\"cx\"])\n            .attr(\"cy\",data=>data[\"cy\"])\n            .attr(\"r\",radius)\n            .attr(\"fill\",data=>data[\"color\"])\n            .call(drag);\n\n\n    }\n\n    render(){\n        return (\n        <div id={\"#\" + this.props.id}>\n\n        </div>);\n    }\n\n\n}\n\nexport default Sk_CirclePlot;",["160","161"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/index.js",["162"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport reportWebVitals from './reportWebVitals';\nimport {Route, BrowserRouter as Router, Switch} from \"react-router-dom\";\nimport Home from \"./Home\";\nimport Geo from './Geo';\nimport ParallelCoordinate from \"./ParallelCoordinate\";\nimport ImageSKY from \"./ImageSKY\";\nimport key from \"./api_key.json\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://maxcdn.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css\"\n      integrity=\"sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk\"\n      crossorigin=\"anonymous\"\n    />\n\n    <link\n      rel=\"stylesheet\"\n      href=\"./index.css\"\n    />\n\n    <Router>\n      <Switch>\n        <Route path = \"/\" exact component={Home}/>\n        <Route path = \"/geoOverview\" component={Geo}/>\n        <Route path = \"/parallelCoordinate\" component={ParallelCoordinate}/>\n        <Route path = \"/imageSky\" component={ImageSKY}/>\n      </Switch>\n    </Router>\n\n\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n",["163","164"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/reportWebVitals.js",[],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Home.js",["165"],"import React from 'react';\nimport \"./Home.css\";\n\n\nclass Home extends React.Component{\n  constructor(props){\n    super(props);\n    // this.state ={\n    //   data: csv\n    // };\n\n  }\n\n\n  render(){\n    \n    return (\n      <div className=\"pageLayout\">\n          <div className=\"leftView\" onClick={()=>{\n             window.location.replace(\"/geoOverview\");\n          }}>\n            <header>Geographical context view</header>\n          </div>\n\n          <div className=\"rightView\" onClick={()=>{\n             window.location.replace(\"/parallelCoordinate\");\n          }}>\n            <header>Parallel coordinate view</header>\n          </div>\n\n      </div>\n    );\n\n  }\n\n}\n\nexport default Home;","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Geo.js",["166"],"import React from 'react';\nimport \"./Geo.css\";\nimport Ggmap from \"./Ggmap\";\n\nclass Geo extends React.Component{\n  constructor(props){\n    super(props);\n    // this.state ={\n    //   data: csv\n    // };\n\n    \n  }\n\n\n\n  render(){\n    \n    return (\n    <div className=\"geoPageLayout\">\n      <h1 className=\"header\">GeoOvervew</h1>\n        <Ggmap/>\n    </div>\n    );\n\n  }\n\n}\n\nexport default Geo;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ParallelCoordinate.js",["167"],"import React from 'react';\nimport \"./ParallelCoordinate.css\";\n\n\nclass ParallelCoordinate extends React.Component{\n  constructor(props){\n    super(props);\n    // this.state ={\n    //   data: csv\n    // };\n\n  }\n\n  render(){\n    \n    return (\n    <div className=\"PCpageLayout\">\n      <h1 className=\"header\">Parallel Coordinate</h1>\n      <div className=\"PCcontainer\">\n        <div className=\"PC\">\n\n        </div>\n      </div>\n    </div>\n    );\n\n  }\n\n}\n\nexport default ParallelCoordinate;\n","/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/ImageSKY.js",["168","169","170","171","172"],"/home/shikun/Desktop/ECS 272/ECS272-Winter2021/FinalProject/react-template/react-d3/src/Ggmap.js",["173","174"],"/*global google*/\nimport {GoogleMap,LoadScript, Marker} from \"@react-google-maps/api\";\nimport {withScriptjs} from \"react-google-maps\";\nimport key from \"./api_key.json\";\nimport React from 'react';\n\n\n\nconst mapStyles = {\n    height:\"100%\",\n    width: \"100%\"\n};\n\n\n\nclass Ggmap extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            array:[\n                {\n                    population:2,\n                    lat:38.546720,\n                    lng:-121.744340,\n                    name:\"United States\",\n                    m_width:20,\n                    m_height:20,\n                    url:\"/vaccination_emoji.png\"\n                },\n                {\n                    population:102334403,\n                    lat:27,\n                    lng:30,\n                    name:\"Egypt\",\n                    m_width:20,\n                    m_height:20,\n                    url:\"/death_emoji.png\"\n                }\n            ],\n            selected_index: 0\n            // selected_lat:38.546720,\n            // selected_lng:-121.744340\n          };\n        this.handle_change = this.handle_change.bind(this);\n        // this.handle_click = this.handle_click.bind(this);\n        // console.log(\"google\",window.google);\n\n    }\n    handle_click(data){\n        window.location.replace(\"/detail_view_1?country=\"+data.name);\n    }\n\n    handle_change(event){\n        this.setState({\n            selected_index:event.target.value\n        });\n        // console.log(this.state.selected_lat, this.state.selected_lng);\n        // this.mapRef.panTo(new window.google.maps.LatLng(this.state.selected_lat, this.state.selected_lng));\n      }\n\n    render(){\n\n        return (\n            <div className=\"GMcontainer\">\n            <div className=\"map\">\n                <LoadScript googleMapsApiKey = {key[\"key\"]}>\n                    <GoogleMap\n                        mapContainerStyle= {mapStyles}\n                        center = {{\n                            lat:this.state.array[this.state.selected_index].lat,\n                            lng:this.state.array[this.state.selected_index].lng\n                        }}\n                        zoom = {2}\n                        // ref={(ref) => {\n                        //     this.mapRef = ref;\n                        // }}\n                    >\n                        {\n                            this.state.array.map((data,index)=>{\n                                return <Marker \n                                            onClick={this.handle_click.bind(this,data)}\n                                            position={{lat:data.lat,lng:data.lng}} \n                                            name={data.name}\n                                            icon={{\n                                                url:data.url,\n                                                scaledSize:{width: data.m_width, height: data.m_height, i: undefined, g: undefined}\n                                        }}\n                                        />\n                            })\n                        }\n                    </GoogleMap>\n                </LoadScript>\n            <script src={\"https://maps.googleapis.com/maps/api/js?key=\"+key[\"key\"]+\"&libraries=geometry\"}></script>\n\n            </div>\n            <div className=\"controlPanel\">\n              <a className=\"home\" href=\"/\">Home</a>\n              \n              <select onChange={this.handle_change}>\n                {this.state.array.map(\n                  (data,index)=>{\n                    // console.log(\"current state\",this.state.selected_lat, this.state.selected_lng)\n                    return <option key={index} value={index}>{data[\"name\"]}</option>\n                  }\n                )}\n              </select>\n              <div className=\"info_window\">\n                <h6> population:{this.state.array[this.state.selected_index].population}</h6>\n                <h6> lat: {this.state.array[this.state.selected_index].lat} </h6>\n                <h6> lng: {this.state.array[this.state.selected_index].lng} </h6>\n              </div>\n\n            \n            </div>\n          </div>\n          \n        \n        )\n    }\n}\n\n\n\nexport default Ggmap;",{"ruleId":"175","severity":1,"message":"176","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":12},{"ruleId":"175","severity":1,"message":"179","line":8,"column":8,"nodeType":"177","messageId":"178","endLine":8,"endColumn":19},{"ruleId":"180","severity":1,"message":"181","line":23,"column":7,"nodeType":"182","endLine":23,"endColumn":19},{"ruleId":"183","replacedBy":"184"},{"ruleId":"185","replacedBy":"186"},{"ruleId":"180","severity":1,"message":"187","line":23,"column":11,"nodeType":"182","endLine":23,"endColumn":74},{"ruleId":"180","severity":1,"message":"188","line":31,"column":11,"nodeType":"182","endLine":31,"endColumn":74},{"ruleId":"180","severity":1,"message":"189","line":39,"column":11,"nodeType":"182","endLine":39,"endColumn":80},{"ruleId":"190","severity":1,"message":"191","line":44,"column":22,"nodeType":"192","messageId":"193","endLine":44,"endColumn":24},{"ruleId":"194","severity":1,"message":"195","line":46,"column":44,"nodeType":"196","messageId":"197","endLine":46,"endColumn":46},{"ruleId":"190","severity":1,"message":"198","line":47,"column":19,"nodeType":"199","messageId":"200","endLine":47,"endColumn":26},{"ruleId":"175","severity":1,"message":"201","line":128,"column":17,"nodeType":"177","messageId":"178","endLine":128,"endColumn":21},{"ruleId":"175","severity":1,"message":"202","line":138,"column":17,"nodeType":"177","messageId":"178","endLine":138,"endColumn":25},{"ruleId":"183","replacedBy":"203"},{"ruleId":"185","replacedBy":"204"},{"ruleId":"190","severity":1,"message":"198","line":34,"column":22,"nodeType":"192","messageId":"205","endLine":34,"endColumn":24},{"ruleId":"175","severity":1,"message":"206","line":89,"column":17,"nodeType":"177","messageId":"178","endLine":89,"endColumn":18},{"ruleId":"190","severity":1,"message":"198","line":34,"column":22,"nodeType":"192","messageId":"205","endLine":34,"endColumn":24},{"ruleId":"175","severity":1,"message":"176","line":4,"column":8,"nodeType":"177","messageId":"178","endLine":4,"endColumn":12},{"ruleId":"175","severity":1,"message":"179","line":8,"column":8,"nodeType":"177","messageId":"178","endLine":8,"endColumn":19},{"ruleId":"180","severity":1,"message":"181","line":24,"column":7,"nodeType":"182","endLine":24,"endColumn":19},{"ruleId":"207","severity":1,"message":"208","line":34,"column":15,"nodeType":"182","endLine":34,"endColumn":143},{"ruleId":"183","replacedBy":"209"},{"ruleId":"185","replacedBy":"210"},{"ruleId":"180","severity":1,"message":"187","line":23,"column":11,"nodeType":"182","endLine":23,"endColumn":74},{"ruleId":"180","severity":1,"message":"188","line":31,"column":11,"nodeType":"182","endLine":31,"endColumn":74},{"ruleId":"180","severity":1,"message":"189","line":39,"column":11,"nodeType":"182","endLine":39,"endColumn":80},{"ruleId":"175","severity":1,"message":"211","line":4,"column":10,"nodeType":"177","messageId":"178","endLine":4,"endColumn":14},{"ruleId":"190","severity":1,"message":"191","line":54,"column":22,"nodeType":"192","messageId":"193","endLine":54,"endColumn":24},{"ruleId":"194","severity":1,"message":"195","line":56,"column":44,"nodeType":"196","messageId":"197","endLine":56,"endColumn":46},{"ruleId":"190","severity":1,"message":"198","line":57,"column":19,"nodeType":"199","messageId":"200","endLine":57,"endColumn":26},{"ruleId":"175","severity":1,"message":"201","line":145,"column":17,"nodeType":"177","messageId":"178","endLine":145,"endColumn":21},{"ruleId":"175","severity":1,"message":"202","line":159,"column":17,"nodeType":"177","messageId":"178","endLine":159,"endColumn":25},{"ruleId":"190","severity":1,"message":"198","line":35,"column":22,"nodeType":"192","messageId":"205","endLine":35,"endColumn":24},{"ruleId":"175","severity":1,"message":"206","line":91,"column":17,"nodeType":"177","messageId":"178","endLine":91,"endColumn":18},{"ruleId":"190","severity":1,"message":"198","line":39,"column":22,"nodeType":"192","messageId":"205","endLine":39,"endColumn":24},{"ruleId":"194","severity":1,"message":"195","line":110,"column":65,"nodeType":"196","messageId":"197","endLine":110,"endColumn":67},{"ruleId":"194","severity":1,"message":"195","line":296,"column":104,"nodeType":"196","messageId":"197","endLine":296,"endColumn":106},{"ruleId":"175","severity":1,"message":"212","line":3,"column":10,"nodeType":"177","messageId":"178","endLine":3,"endColumn":14},{"ruleId":"183","replacedBy":"213"},{"ruleId":"185","replacedBy":"214"},{"ruleId":"175","severity":1,"message":"215","line":10,"column":8,"nodeType":"177","messageId":"178","endLine":10,"endColumn":11},{"ruleId":"183","replacedBy":"216"},{"ruleId":"185","replacedBy":"217"},{"ruleId":"218","severity":1,"message":"219","line":6,"column":3,"nodeType":"220","messageId":"221","endLine":12,"endColumn":4},{"ruleId":"218","severity":1,"message":"219","line":6,"column":3,"nodeType":"220","messageId":"221","endLine":13,"endColumn":4},{"ruleId":"218","severity":1,"message":"219","line":6,"column":3,"nodeType":"220","messageId":"221","endLine":12,"endColumn":4},{"ruleId":"175","severity":1,"message":"222","line":4,"column":10,"nodeType":"177","messageId":"178","endLine":4,"endColumn":15},{"ruleId":"194","severity":1,"message":"223","line":313,"column":14,"nodeType":"196","messageId":"197","endLine":313,"endColumn":16},{"ruleId":"194","severity":1,"message":"223","line":348,"column":83,"nodeType":"196","messageId":"197","endLine":348,"endColumn":85},{"ruleId":"194","severity":1,"message":"223","line":349,"column":76,"nodeType":"196","messageId":"197","endLine":349,"endColumn":78},{"ruleId":"194","severity":1,"message":"223","line":350,"column":82,"nodeType":"196","messageId":"197","endLine":350,"endColumn":84},{"ruleId":"175","severity":1,"message":"224","line":1,"column":10,"nodeType":"225","messageId":"178","endLine":1,"endColumn":16},{"ruleId":"175","severity":1,"message":"226","line":3,"column":9,"nodeType":"177","messageId":"178","endLine":3,"endColumn":21},"no-unused-vars","'data' is defined but never used.","Identifier","unusedVar","'Sk_BarChart' is defined but never used.","react/jsx-pascal-case","Imported JSX component My_Navbar must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","no-native-reassign",["227"],"no-negated-in-lhs",["228"],"Imported JSX component Sk_BarChart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Sk_PieChart must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Sk_VoronoiDiagram must be in PascalCase or SCREAMING_SNAKE_CASE","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'bars' is assigned a value but never used.","'captions' is assigned a value but never used.",["227"],["228"],"expectedInside","'g' is assigned a value but never used.","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.",["227"],["228"],"'sort' is defined but never used.","'drag' is defined but never used.",["227"],["228"],"'key' is defined but never used.",["227"],["228"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'index' is defined but never used.","Expected '===' and instead saw '=='.","'google' is defined but never used.","Program","'withScriptjs' is defined but never used.","no-global-assign","no-unsafe-negation"]